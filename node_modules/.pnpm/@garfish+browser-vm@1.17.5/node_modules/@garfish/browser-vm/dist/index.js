var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  GarfishBrowserVm: () => GarfishBrowserVm,
  default: () => Sandbox
});

// src/pluginify.ts
var import_utils19 = require("@garfish/utils");

// src/sandbox.ts
var import_loader = require("@garfish/loader");
var import_utils17 = require("@garfish/utils");

// src/modules/history.ts
var import_utils4 = require("@garfish/utils");

// src/proxyInterceptor/shared.ts
var import_utils2 = require("@garfish/utils");

// src/utils.ts
var import_utils = require("@garfish/utils");

// src/symbolTypes.ts
var GARFISH_NAMESPACE_PREFIX = "__Garfish__";
var GARFISH_OPTIMIZE_NAME = "__garfish_optimize__";
var __proxyNode__ = Symbol.for("garfish.proxyNode");
var __domWrapper__ = Symbol.for("garfish.domWrapper");
var __windowBind__ = Symbol.for("garfish.windowBind");
var __sandboxMap__ = Symbol.for("garfish.sandboxMap");
var __documentBind__ = Symbol.for("garfish.documentBind");
var __garfishGlobal__ = Symbol.for("garfish.globalObject");
var __elementSandboxTag__ = Symbol.for("garfish.elementSandboxTag");

// src/utils.ts
var esGlobalMethods = "eval,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Array,ArrayBuffer,BigInt,BigInt64Array,BigUint64Array,Boolean,DataView,Date,Error,EvalError,FinalizationRegistry,Float32Array,Float64Array,Function,Int8Array,Int16Array,Int32Array,Map,Number,Object,Promise,Proxy,RangeError,ReferenceError,RegExp,Set,SharedArrayBuffer,String,Symbol,SyntaxError,TypeError,Uint8Array,Uint8ClampedArray,Uint16Array,Uint32Array,URIError,WeakMap,WeakRef,WeakSet,Atomics,JSON,Math,Reflect,".split(",");
var nativeCodeMethods = "hasOwnProperty,".split(",");
var isEsGlobalMethods = (0, import_utils.makeMap)(esGlobalMethods);
var isNativeCodeMethods = (0, import_utils.makeMap)(nativeCodeMethods);
var optimizeMethods = [...esGlobalMethods].filter((v) => v !== "eval");
var sandboxList = /* @__PURE__ */ new Map();
if (!window[__sandboxMap__]) {
  window[__sandboxMap__] = sandboxList;
} else {
  sandboxList = window[__sandboxMap__];
}
var sandboxMap = {
  sandboxMap: sandboxList,
  get(element) {
    if (!element)
      return;
    const sandboxId = element[__elementSandboxTag__];
    if (typeof sandboxId !== "number")
      return;
    return this.sandboxMap.get(sandboxId);
  },
  setElementTag(element, sandbox) {
    if (!element)
      return;
    element[__elementSandboxTag__] = sandbox.id;
  },
  set(sandbox) {
    if (this.sandboxMap.get(sandbox.id))
      return;
    this.sandboxMap.set(sandbox.id, sandbox);
  },
  del(sandbox) {
    this.sandboxMap.delete(sandbox.id);
  }
};
function handlerParams(args) {
  args = Array.isArray(args) ? args : Array.from(args);
  return args.map((v) => {
    return v && v[__proxyNode__] ? v[__proxyNode__] : v;
  });
}
function rootElm(sandbox) {
  const container = sandbox && sandbox.options.el;
  return container && container();
}
function createFakeObject(target, filter, isWritable) {
  const fakeObject = {};
  const propertyMap = {};
  const storageBox = /* @__PURE__ */ Object.create(null);
  const propertyNames = Object.getOwnPropertyNames(target);
  const def2 = (p) => {
    const descriptor = Object.getOwnPropertyDescriptor(target, p);
    if (descriptor == null ? void 0 : descriptor.configurable) {
      const hasGetter = (0, import_utils.hasOwn)(descriptor, "get");
      const hasSetter = (0, import_utils.hasOwn)(descriptor, "set");
      const canWritable = typeof isWritable === "function" && isWritable(p);
      if (hasGetter) {
        descriptor.get = () => (0, import_utils.hasOwn)(storageBox, p) ? storageBox[p] : target[p];
      }
      if (hasSetter) {
        descriptor.set = (val) => {
          storageBox[p] = val;
          return true;
        };
      }
      if (canWritable) {
        if (descriptor.writable === false) {
          descriptor.writable = true;
        } else if (hasSetter) {
          descriptor.set = (val) => {
            storageBox[p] = val;
            return true;
          };
        }
      }
      Object.defineProperty(fakeObject, p, Object.freeze(descriptor));
    }
  };
  propertyNames.forEach((p) => {
    propertyMap[p] = true;
    typeof filter === "function" ? !filter(p) && def2(p) : def2(p);
  });
  for (const prop in target) {
    !propertyMap[prop] && def2(prop);
  }
  return fakeObject;
}
var setting = true;
function microTaskHtmlProxyDocument(proxyDocument) {
  const html = document.children[0];
  if (html && html.parentNode !== proxyDocument) {
    Object.defineProperty(html, "parentNode", {
      value: proxyDocument,
      configurable: true
    });
    if (setting) {
      setting = false;
      (0, import_utils.nextTick)(() => {
        setting = true;
        Object.defineProperty(html, "parentNode", {
          value: document,
          configurable: true
        });
      });
    }
  }
}
function isStyledComponentsLike(element) {
  return element instanceof HTMLStyleElement && !element.textContent;
}
var LockQueue = class {
  constructor() {
    this.id = 0;
    this.lockQueue = [];
    this.currentId = 0;
  }
  genId() {
    const lockId = this.id;
    let promiseResolve = () => {
    };
    const waiting = new Promise((resolve) => {
      promiseResolve = resolve;
      this.currentId++;
    });
    const lockItem = {
      id: lockId,
      waiting,
      resolve: () => {
        promiseResolve();
      }
    };
    this.lockQueue.push(lockItem);
    this.id += 1;
    return lockId;
  }
  getId() {
    return this.id;
  }
  async wait(id2) {
    const { lockQueue } = this;
    const firstLock = lockQueue[0];
    const lockItem = lockQueue.find((item) => item.id === id2);
    const lockIndex = lockQueue.findIndex((item) => item.id === id2);
    if (firstLock.id === id2) {
      lockItem == null ? void 0 : lockItem.resolve();
      return;
    }
    if (lockItem) {
      await Promise.all(lockQueue.slice(0, lockIndex).map((item) => item.waiting));
      const lastLock = lockQueue[lockQueue.length - 1];
      if (lastLock.id === id2) {
        this.clear();
      }
    }
  }
  release(id2) {
    const { lockQueue } = this;
    const lockItem = lockQueue.find((item) => item.id === id2);
    lockItem == null ? void 0 : lockItem.resolve();
  }
  clear() {
    this.lockQueue = [];
  }
};

// src/proxyInterceptor/shared.ts
function isDataDescriptor(desc) {
  if (desc === void 0)
    return false;
  return "value" in desc || "writable" in desc;
}
function isAccessorDescriptor(desc) {
  if (desc === void 0)
    return false;
  return "get" in desc || "set" in desc;
}
function verifyGetterDescriptor(target, p, newValue) {
  const desc = Object.getOwnPropertyDescriptor(target, p);
  if (desc !== void 0 && desc.configurable === false) {
    if (isDataDescriptor(desc) && desc.writable === false) {
      if (!Object.is(newValue, desc.value)) {
        if (typeof process !== "undefined" && process.env && process.env.NODE_ENV ? process.env.NODE_ENV !== "production" : false) {
          (0, import_utils2.warn)(`property "${String(p)}" is non-configurable and non-writable.`);
        }
        return 1;
      }
    } else if (isAccessorDescriptor(desc) && desc.get === void 0) {
      return 2;
    }
  }
  return 0;
}
function verifySetter(proxyTarget, target, p, val, receiver) {
  const verifyResult = verifySetterDescriptor(proxyTarget ? proxyTarget : receiver || target, p, val);
  let result;
  if (verifyResult > 0) {
    if (verifyResult === 1 || verifyResult === 2)
      result = false;
    if (verifyResult === 3)
      result = true;
  }
  return result;
}
function verifySetterDescriptor(target, p, newValue) {
  const desc = Object.getOwnPropertyDescriptor(target, p);
  if (desc !== void 0 && desc.configurable === false) {
    if (isDataDescriptor(desc) && desc.writable === false) {
      if (!Object.is(newValue, desc.value)) {
        if (typeof process !== "undefined" && process.env && process.env.NODE_ENV ? process.env.NODE_ENV !== "production" : false) {
          (0, import_utils2.warn)(`property "${String(p)}" is non-configurable and non-writable.`);
        }
        return 1;
      } else {
        return 3;
      }
    } else if (isAccessorDescriptor(desc) && desc.set === void 0) {
      return 2;
    }
  }
  return 0;
}
function safeToString(thing) {
  try {
    return thing.toString();
  } catch (e) {
    return "[toString failed]";
  }
}
function isConstructor(fn) {
  const fp = fn.prototype;
  const hasConstructor = fp && fp.constructor === fn && Object.getOwnPropertyNames(fp).length > 1;
  const functionStr = !hasConstructor && safeToString(fn);
  return hasConstructor || /^function\s+[A-Z]/.test(functionStr) || /^class\b/.test(functionStr);
}
var buildInProps = (0, import_utils2.makeMap)([
  "length",
  "caller",
  "callee",
  "arguments",
  "prototype",
  Symbol.hasInstance
]);
function transferProps(o, n) {
  for (const key of Reflect.ownKeys(o)) {
    if (buildInProps(key))
      continue;
    const desc = Object.getOwnPropertyDescriptor(n, key);
    if (desc && desc.writable) {
      n[key] = o[key];
    }
  }
}
function bind(fn, context) {
  const fNOP = function() {
  };
  function bound() {
    const args = handlerParams(arguments);
    if (this instanceof bound) {
      const obj = new fn(...args);
      Object.setPrototypeOf(obj, bound.prototype);
      return obj;
    } else {
      return fn.apply(context, args);
    }
  }
  bound.$native = fn;
  transferProps(fn, bound);
  if (fn.prototype) {
    fNOP.prototype = fn.prototype;
  }
  bound.prototype = new fNOP();
  if (Symbol.hasInstance) {
    Object.defineProperty(bound, Symbol.hasInstance, {
      configurable: true,
      value(instance) {
        const op = fn.prototype;
        return (0, import_utils2.isObject)(op) || typeof op === "function" ? instance instanceof fn : false;
      }
    });
  }
  return bound;
}

// src/modules/history.ts
var passedKey = (0, import_utils4.makeMap)(["scrollRestoration"]);
function historyModule() {
  const proto = Object.getPrototypeOf(window.history) || History.prototype;
  const fakeHistory = Object.create(proto);
  const proxyHistory = new Proxy(fakeHistory, {
    get(target, p) {
      const value = (0, import_utils4.hasOwn)(target, p) ? target[p] : window.history[p];
      return typeof value === "function" ? value.bind(window.history) : value;
    },
    set(target, p, value, receiver) {
      const isPassKey = typeof p === "string" && passedKey(p);
      const verifySetterResult = verifySetter(isPassKey ? history : null, target, p, value, receiver);
      if (verifySetterResult !== void 0) {
        return verifySetterResult;
      } else {
        return isPassKey ? Reflect.set(history, p, value) : Reflect.set(target, p, value, receiver);
      }
    },
    getPrototypeOf() {
      return fakeHistory;
    }
  });
  const fakeHistoryCtor = function History2() {
    throw new TypeError("Illegal constructor");
  };
  fakeHistoryCtor.prototype = fakeHistory;
  fakeHistoryCtor.prototype.constructor = fakeHistoryCtor;
  return {
    override: {
      history: proxyHistory,
      History: fakeHistoryCtor
    }
  };
}

// src/modules/network.ts
var import_utils5 = require("@garfish/utils");
function networkModule(sandbox) {
  const baseUrl = sandbox.options.baseUrl;
  const wsSet = /* @__PURE__ */ new Set();
  const xhrSet = /* @__PURE__ */ new Set();
  const fetchSet = /* @__PURE__ */ new Set();
  const needFix = (url) => sandbox.options.fixBaseUrl && baseUrl && typeof url === "string" && !(0, import_utils5.isAbsolute)(url);
  class fakeXMLHttpRequest extends XMLHttpRequest {
    constructor() {
      super();
      if (!sandbox.options.disableCollect) {
        xhrSet.add(this);
      }
    }
    open() {
      if (arguments[2] === false) {
        xhrSet.delete(this);
      }
      if (needFix(arguments[1])) {
        arguments[1] = baseUrl ? (0, import_utils5.transformUrl)(baseUrl, arguments[1]) : arguments[1];
      }
      const url = arguments[1];
      if (sandbox.options.addSourceList) {
        sandbox.options.addSourceList({
          tagName: "xmlhttprequest",
          url
        });
      }
      return super.open.apply(this, arguments);
    }
    abort() {
      xhrSet.delete(this);
      return super.abort.apply(this, arguments);
    }
  }
  class fakeWebSocket extends WebSocket {
    constructor(url, protocols) {
      if (needFix(url) && baseUrl) {
        const baseWsUrl = (0, import_utils5.toWsProtocol)(baseUrl);
        url = (0, import_utils5.transformUrl)(baseWsUrl, arguments[1]);
      }
      super(url, protocols);
      if (!sandbox.options.disableCollect) {
        wsSet.add(this);
      }
    }
    close() {
      wsSet.delete(this);
      return super.close.apply(this, arguments);
    }
  }
  const fakeFetch = (input, options = {}) => {
    if (needFix(input) && baseUrl) {
      input = (0, import_utils5.transformUrl)(baseUrl, input);
    }
    if (sandbox.options.addSourceList) {
      sandbox.options.addSourceList({
        tagName: "fetch",
        url: input
      });
    }
    let controller;
    if (!(0, import_utils5.hasOwn)(options, "signal") && window.AbortController) {
      controller = new window.AbortController();
      if (!sandbox.options.disableCollect) {
        fetchSet.add(controller);
      }
      options.signal = controller.signal;
    }
    const result = window.fetch(input, options);
    return controller && (0, import_utils5.isPromise)(result) ? result.finally(() => fetchSet.delete(controller)) : result;
  };
  return {
    override: {
      WebSocket: fakeWebSocket,
      XMLHttpRequest: fakeXMLHttpRequest,
      fetch: fakeFetch
    },
    recover() {
      wsSet.forEach((ws) => {
        if (typeof ws.close === "function")
          ws.close();
      });
      xhrSet.forEach((xhr) => {
        if (typeof xhr.abort === "function")
          xhr.abort();
      });
      fetchSet.forEach((ctor) => {
        if (typeof ctor.abort === "function")
          ctor.abort();
      });
      wsSet.clear();
      xhrSet.clear();
      fetchSet.clear();
    }
  };
}

// src/proxyInterceptor/document.ts
var import_utils6 = require("@garfish/utils");
var passedKey2 = (0, import_utils6.makeMap)(["title", "cookie", "onselectstart", "ondragstart"]);
var queryFunctions = (0, import_utils6.makeMap)([
  "querySelector",
  "querySelectorAll",
  "getElementById",
  "getElementsByTagName",
  "getElementsByTagNameNS",
  "getElementsByClassName"
]);
function createGetter(sandbox) {
  return (target, p, receiver) => {
    if (p === "activeElement") {
      return Reflect.get(document, p);
    }
    const rootNode = rootElm(sandbox);
    const strictIsolation = sandbox.options.strictIsolation;
    const value = (0, import_utils6.hasOwn)(target, p) ? Reflect.get(target, p, receiver) : Reflect.get(document, p);
    const hooksRes = sandbox.hooks.lifecycle.documentGetter.emit({
      value,
      rootNode,
      propName: p,
      proxyDocument: target,
      customValue: null
    });
    if (hooksRes.customValue) {
      return hooksRes.customValue;
    }
    const setSandboxRef = (el) => {
      if ((0, import_utils6.isObject)(el)) {
        sandboxMap.setElementTag(el, sandbox);
        if (typeof process !== "undefined" && process.env && process.env.NODE_ENV ? process.env.NODE_ENV !== "production" : false) {
          el.__SANDBOX__ = true;
        }
      }
      return el;
    };
    if (rootNode) {
      if (p === "createElement") {
        return function(tagName, options) {
          const el = value.call(document, tagName, options);
          return setSandboxRef(el);
        };
      }
      if (p === "createElementNS") {
        return function(...args) {
          const el = value.call(document, ...args);
          return setSandboxRef(el);
        };
      } else if (p === "createTextNode") {
        return function(data) {
          const el = value.call(document, data);
          return setSandboxRef(el);
        };
      } else if (p === "head") {
        return (0, import_utils6.findTarget)(rootNode, ["head", `div[${import_utils6.__MockHead__}]`]) || value;
      }
      if (strictIsolation) {
        if (p === "body") {
          return (0, import_utils6.findTarget)(rootNode, ["body", `div[${import_utils6.__MockBody__}]`]);
        } else if (queryFunctions(p)) {
          return p === "getElementById" ? (id2) => rootNode.querySelector(`#${id2}`) : rootNode[p].bind(rootNode);
        }
      }
    }
    if (typeof value === "function") {
      let newValue = (0, import_utils6.hasOwn)(value, __documentBind__) ? value[__documentBind__] : null;
      if (!newValue)
        newValue = bind(value, document);
      const verifyResult = verifyGetterDescriptor(target, p, newValue);
      if (verifyResult > 0) {
        if (verifyResult === 1)
          return value;
        if (verifyResult === 2)
          return void 0;
      }
      value[__documentBind__] = newValue;
      return newValue;
    }
    return value;
  };
}
var safariProxyDocumentDealHandler = (0, import_utils6.safari13Deal)();
function createSetter(sandbox) {
  return (target, p, value, receiver) => {
    const rootNode = rootElm(sandbox);
    const verifyResult = verifySetterDescriptor(typeof p === "string" && passedKey2(p) ? document : receiver || target, p, value);
    if (verifyResult > 0) {
      if (verifyResult === 1 || verifyResult === 2)
        return false;
      if (verifyResult === 3)
        return true;
    }
    if (p === "onselectstart" || p === "ondragstart") {
      if (rootNode) {
        return Reflect.set(rootNode, p, value);
      } else {
        return Reflect.set(document, p, value);
      }
    }
    if (typeof p === "string" && passedKey2(p)) {
      return Reflect.set(document, p, value);
    } else {
      safariProxyDocumentDealHandler.triggerSet();
      return Reflect.set(target, p, value, receiver);
    }
  };
}
function createDefineProperty() {
  return (target, p, descriptor) => {
    safariProxyDocumentDealHandler.handleDescriptor(descriptor);
    return passedKey2(p) ? Reflect.defineProperty(document, p, descriptor) : Reflect.defineProperty(target, p, descriptor);
  };
}
function createHas() {
  return (target, p) => {
    if (p === "activeElement")
      return Reflect.has(document, p);
    return (0, import_utils6.hasOwn)(target, p) || Reflect.has(document, p);
  };
}

// src/modules/document.ts
var documentModule = (sandbox) => {
  let proxyDocument = Object.create(document);
  const getter = createGetter(sandbox);
  const fakeDocument = createFakeObject(document);
  const fakeDocumentProto = new Proxy(fakeDocument, {
    get: (...args) => {
      microTaskHtmlProxyDocument(proxyDocument);
      return getter(...args);
    },
    has: createHas()
  });
  proxyDocument = new Proxy(Object.create(fakeDocumentProto, {
    currentScript: {
      value: null,
      writable: true
    },
    [__proxyNode__]: {
      writable: false,
      configurable: false,
      value: document
    }
  }), {
    set: createSetter(sandbox),
    defineProperty: createDefineProperty(),
    getPrototypeOf() {
      return HTMLDocument.prototype || Document.prototype;
    }
  });
  return {
    override: {
      document: proxyDocument
    }
  };
};

// src/modules/uiEvent.ts
var import_utils9 = require("@garfish/utils");
var MouseEventPatch = class extends MouseEvent {
  constructor(typeArg, mouseEventInit) {
    if (mouseEventInit && (0, import_utils9.getType)(mouseEventInit.view) === "window") {
      mouseEventInit.view = window;
    }
    super(typeArg, mouseEventInit);
  }
};
function UiEventOverride() {
  return {
    override: {
      MouseEvent: MouseEventPatch
    }
  };
}

// src/modules/storage.ts
var CusStorage = class {
  constructor(namespace, rawStorage) {
    this.rawStorage = rawStorage;
    this.namespace = namespace;
    this.prefix = `${GARFISH_NAMESPACE_PREFIX}${namespace}__`;
  }
  get length() {
    return this.getKeys().length;
  }
  getKeys() {
    return Object.keys(this.rawStorage).filter((key) => key.startsWith(this.prefix));
  }
  key(n) {
    const key = this.getKeys()[n];
    return key ? key.substring(this.prefix.length) : null;
  }
  getItem(keyName) {
    return this.rawStorage.getItem(`${this.prefix + keyName}`);
  }
  setItem(keyName, keyValue) {
    this.rawStorage.setItem(`${this.prefix + keyName}`, keyValue);
  }
  removeItem(keyName) {
    this.rawStorage.removeItem(`${this.prefix + keyName}`);
  }
  clear() {
    this.getKeys().forEach((key) => {
      this.rawStorage.removeItem(key);
    });
  }
};
function localStorageModule(sandbox) {
  const namespace = sandbox.options.namespace;
  return {
    override: {
      localStorage: new CusStorage(namespace, localStorage),
      sessionStorage: new CusStorage(namespace, sessionStorage)
    }
  };
}

// src/modules/eventListener.ts
function listenerModule(_sandbox) {
  const listeners = /* @__PURE__ */ new Map();
  const rawAddEventListener = window.addEventListener;
  const rawRemoveEventListener = window.removeEventListener;
  function addListener(type, listener, options) {
    const curListeners = listeners.get(type) || [];
    if (!_sandbox.options.disableCollect) {
      listeners.set(type, [...curListeners, listener]);
    }
    rawAddEventListener.call(this, type, listener, options);
  }
  function removeListener(type, listener, options) {
    const curListeners = listeners.get(type) || [];
    const idx = curListeners.indexOf(listener);
    if (idx !== -1) {
      curListeners.splice(idx, 1);
    }
    if (!_sandbox.options.disableCollect) {
      listeners.set(type, [...curListeners]);
    }
    rawRemoveEventListener.call(this, type, listener, options);
  }
  const recover = () => {
    listeners.forEach((listener, key) => {
      listener.forEach((fn) => {
        rawRemoveEventListener.call(window, key, fn);
      });
    });
    listeners.clear();
  };
  return {
    recover,
    override: {
      addEventListener: addListener.bind(window),
      removeEventListener: removeListener.bind(window)
    },
    created(global) {
      const fakeDocument = global == null ? void 0 : global.document;
      if (fakeDocument) {
        fakeDocument.addEventListener = addListener.bind(document);
        fakeDocument.removeEventListener = removeListener.bind(document);
      }
    }
  };
}

// src/modules/mutationObserver.ts
function observerModule(_sandbox) {
  const observerSet = /* @__PURE__ */ new Set();
  class ProxyMutationObserver extends MutationObserver {
    constructor(cb) {
      super(cb);
      if (!_sandbox.options.disableCollect) {
        observerSet.add(this);
      }
    }
  }
  const recover = () => {
    observerSet.forEach((observer) => {
      if (typeof observer.disconnect === "function")
        observer.disconnect();
    });
    observerSet.clear();
  };
  return {
    recover,
    override: {
      MutationObserver: ProxyMutationObserver
    }
  };
}

// src/modules/timer.ts
var rawSetTimeout = window.setTimeout;
var rawClearTimeout = window.clearTimeout;
var rawSetInterval = window.setInterval;
var rawClearInterval = window.clearInterval;
var timeoutModule = (sandbox) => {
  const timeout = /* @__PURE__ */ new Set();
  const setTimeout2 = (handler, ms, ...args) => {
    const timeoutId = rawSetTimeout(handler, ms, ...args);
    if (!sandbox.options.disableCollect) {
      timeout.add(timeoutId);
    }
    return timeoutId;
  };
  const clearTimeout = (timeoutId) => {
    timeout.delete(timeoutId);
    rawClearTimeout(timeoutId);
  };
  const recover = () => {
    timeout.forEach((timeoutId) => {
      rawClearTimeout(timeoutId);
    });
  };
  return {
    recover,
    override: {
      setTimeout: setTimeout2,
      clearTimeout
    }
  };
};
var intervalModule = (sandbox) => {
  const timeout = /* @__PURE__ */ new Set();
  const setInterval = (callback, ms, ...args) => {
    const intervalId = rawSetInterval(callback, ms, ...args);
    if (!sandbox.options.disableCollect) {
      timeout.add(intervalId);
    }
    return intervalId;
  };
  const clearInterval = (intervalId) => {
    timeout.delete(intervalId);
    rawClearInterval(intervalId);
  };
  const recover = () => {
    timeout.forEach((intervalId) => {
      rawClearInterval(intervalId);
    });
  };
  return {
    recover,
    override: {
      setInterval,
      clearInterval,
      setImmediate: (fn) => setTimeout(fn, 0)
    }
  };
};

// src/dynamicNode/index.ts
var import_utils13 = require("@garfish/utils");

// src/dynamicNode/processParams.ts
function injectHandlerParams() {
  if (window.MutationObserver) {
    const rawObserver = window.MutationObserver.prototype.observe;
    MutationObserver.prototype.observe = function() {
      return rawObserver.apply(this, handlerParams(arguments));
    };
  }
  const desc = Object.getOwnPropertyDescriptor(window.Document.prototype, "activeElement");
  const rawActiveEl = desc && desc.get;
  if (rawActiveEl) {
    Object.defineProperty(window.Document.prototype, "activeElement", {
      get(...args) {
        return rawActiveEl.apply(handlerParams([this])[0], handlerParams(args));
      }
    });
  }
}

// src/dynamicNode/processor.ts
var import_utils11 = require("@garfish/utils");
var isInsertMethod = (0, import_utils11.makeMap)(["insertBefore", "insertAdjacentElement"]);
var rawElementMethods = /* @__PURE__ */ Object.create(null);
var _DynamicNodeProcessor = class {
  constructor(el, sandbox, methodName) {
    this.nativeAppend = rawElementMethods["appendChild"];
    this.nativeRemove = rawElementMethods["removeChild"];
    this.el = el;
    this.sandbox = sandbox;
    this.methodName = methodName;
    this.rootElement = rootElm(sandbox) || document;
    this.DOMApis = new import_utils11.DOMApis(sandbox.global.document);
    this.tagName = el.tagName ? el.tagName.toLowerCase() : "";
  }
  is(tag) {
    return this.tagName === tag;
  }
  fixResourceNodeUrl(el) {
    const baseUrl = this.sandbox.options.baseUrl;
    if (baseUrl) {
      const src = el.getAttribute("src");
      const href = el.getAttribute("href");
      if (this.sandbox.options.fixStaticResourceBaseUrl) {
        src && (el.src = (0, import_utils11.transformUrl)(baseUrl, src));
        href && (el.href = (0, import_utils11.transformUrl)(baseUrl, href));
      }
      const url = el.src || el.href;
      if (url && this.sandbox.options.addSourceList) {
        this.sandbox.options.addSourceList({
          tagName: el.tagName,
          url
        });
      }
    }
  }
  dispatchEvent(type, errInfo) {
    Promise.resolve().then(() => {
      var _a;
      const isError = type === "error";
      let event;
      if (isError && errInfo) {
        event = new ErrorEvent(type, __spreadProps(__spreadValues({}, errInfo), {
          message: (_a = errInfo.error) == null ? void 0 : _a.message
        }));
      } else {
        event = new Event(type);
      }
      event.__byGarfish__ = true;
      Object.defineProperty(event, "target", { value: this.el });
      this.el.dispatchEvent(event);
      isError && window.dispatchEvent(event);
    });
  }
  addDynamicLinkNode(callback) {
    const { href, type } = this.el;
    if (!type || (0, import_utils11.isCssType)({ src: href, type })) {
      if (href) {
        const { baseUrl, namespace, styleScopeId } = this.sandbox.options;
        const fetchUrl = baseUrl ? (0, import_utils11.transformUrl)(baseUrl, href) : href;
        const lockId = _DynamicNodeProcessor.linkLock.genId();
        this.sandbox.loader.load({
          scope: namespace,
          url: fetchUrl,
          defaultContentType: type
        }).then(async ({ resourceManager: styleManager }) => {
          await _DynamicNodeProcessor.linkLock.wait(lockId);
          if (styleManager) {
            styleManager.correctPath();
            if (styleScopeId) {
              styleManager.setScope({
                appName: namespace,
                rootElId: styleScopeId()
              });
            }
            callback(styleManager.renderAsStyleElement());
          } else {
            (0, import_utils11.warn)(`Invalid resource type "${type}", "${href}" can't generate styleManager`);
          }
          this.dispatchEvent("load");
          _DynamicNodeProcessor.linkLock.release(lockId);
        }).catch((e) => {
          _DynamicNodeProcessor.linkLock.release(lockId);
          (typeof process !== "undefined" && process.env && process.env.NODE_ENV ? process.env.NODE_ENV !== "production" : false) && (0, import_utils11.warn)(e);
          this.dispatchEvent("error", {
            error: e,
            filename: fetchUrl
          });
        });
      }
    } else {
      if (typeof process !== "undefined" && process.env && process.env.NODE_ENV ? process.env.NODE_ENV !== "production" : false) {
        (0, import_utils11.warn)(`Invalid resource type "${type}", "${href}"`);
      }
    }
    const linkCommentNode = this.DOMApis.createLinkCommentNode(href);
    this.el[import_utils11.__REMOVE_NODE__] = () => this.DOMApis.removeElement(linkCommentNode);
    return linkCommentNode;
  }
  addDynamicScriptNode() {
    const { src, type, crossOrigin } = this.el;
    const isModule2 = type === "module";
    const code = this.el.textContent || this.el.text || "";
    if (!type || (0, import_utils11.isJsType)({ src, type })) {
      const { baseUrl, namespace } = this.sandbox.options;
      if (src) {
        const fetchUrl = baseUrl ? (0, import_utils11.transformUrl)(baseUrl, src) : src;
        this.sandbox.loader.load({
          scope: namespace,
          url: fetchUrl,
          crossOrigin,
          defaultContentType: type
        }).then((manager) => {
          if (manager.resourceManager) {
            const {
              resourceManager: { url, scriptCode }
            } = manager;
            this.sandbox.execScript(scriptCode, {}, url, {
              isModule: isModule2,
              defer: false,
              async: false,
              noEntry: true,
              originScript: this.el
            });
          } else {
            (0, import_utils11.warn)(`Invalid resource type "${type}", "${src}" can't generate scriptManager`);
          }
          this.dispatchEvent("load");
        }, (e) => {
          (typeof process !== "undefined" && process.env && process.env.NODE_ENV ? process.env.NODE_ENV !== "production" : false) && (0, import_utils11.warn)(e);
          this.dispatchEvent("error", {
            error: e,
            filename: fetchUrl
          });
        });
      } else if (code) {
        this.sandbox.execScript(code, {}, baseUrl, {
          noEntry: true,
          originScript: this.el
        });
      }
      const scriptCommentNode = this.DOMApis.createScriptCommentNode({
        src,
        code
      });
      this.el[import_utils11.__REMOVE_NODE__] = () => this.DOMApis.removeElement(scriptCommentNode);
      return scriptCommentNode;
    }
    return this.el;
  }
  monitorChangesOfLinkNode() {
    if (this.el.modifyFlag)
      return;
    const mutator = new MutationObserver((mutations) => {
      var _a;
      if (this.el.modifyFlag)
        return;
      for (const { type, attributeName } of mutations) {
        if (type === "attributes") {
          if (attributeName === "rel" || attributeName === "stylesheet") {
            if (this.el.modifyFlag)
              return;
            if (this.el.rel === "stylesheet" && this.el.href) {
              this.el.disabled = this.el.modifyFlag = true;
              const commentNode = this.addDynamicLinkNode((styleNode) => {
                var _a2;
                (_a2 = commentNode.parentNode) == null ? void 0 : _a2.replaceChild(styleNode, commentNode);
              });
              (_a = this.el.parentNode) == null ? void 0 : _a.replaceChild(commentNode, this.el);
            }
          }
        }
      }
    });
    mutator.observe(this.el, { attributes: true });
  }
  monitorChangesOfStyle() {
    const { baseUrl, namespace, styleScopeId } = this.sandbox.options;
    const rootElId = styleScopeId == null ? void 0 : styleScopeId();
    const modifyStyleCode = (styleCode) => {
      if (styleCode) {
        const manager = new this.sandbox.loader.StyleManager(styleCode);
        manager.correctPath(baseUrl);
        if (rootElId) {
          manager.setScope({
            rootElId,
            appName: namespace
          });
        }
        styleCode = manager.transformCode(styleCode);
      }
      return styleCode;
    };
    const mutator = new MutationObserver((mutations) => {
      var _a;
      for (const { type, addedNodes } of mutations) {
        if (type === "childList") {
          if ((_a = addedNodes[0]) == null ? void 0 : _a.textContent) {
            addedNodes[0].textContent = modifyStyleCode(addedNodes[0].textContent);
          }
        }
      }
    });
    mutator.observe(this.el, { childList: true });
    let fakeSheet = null;
    Reflect.defineProperty(this.el, "sheet", {
      get: () => {
        if (!fakeSheet) {
          fakeSheet = this.createFakeSheet(modifyStyleCode);
        }
        return fakeSheet;
      },
      configurable: true
    });
  }
  findParentNodeInApp(parentNode, defaultInsert) {
    if (parentNode === document.body) {
      return (0, import_utils11.findTarget)(this.rootElement, [
        "body",
        `div[${import_utils11.__MockBody__}]`
      ]);
    } else if (parentNode === document.head) {
      return (0, import_utils11.findTarget)(this.rootElement, [
        "head",
        `div[${import_utils11.__MockHead__}]`
      ]);
    }
    if (this.rootElement.contains(parentNode) || !document.contains(parentNode)) {
      return parentNode;
    }
    if (defaultInsert === "head") {
      return (0, import_utils11.findTarget)(this.rootElement, [
        "head",
        `div[${import_utils11.__MockHead__}]`
      ]);
    } else if (defaultInsert === "body") {
      return (0, import_utils11.findTarget)(this.rootElement, [
        "body",
        `div[${import_utils11.__MockBody__}]`
      ]);
    }
    return parentNode;
  }
  append(context, args, originProcess) {
    var _a, _b;
    let convertedNode;
    let parentNode = context;
    const { baseUrl, namespace, styleScopeId } = this.sandbox.options;
    if (import_utils11.sourceListTags.includes(this.tagName)) {
      this.fixResourceNodeUrl(this.el);
    }
    if (this.is("script") && ((_a = this.el) == null ? void 0 : _a.getAttribute("type")) !== "application/json") {
      parentNode = this.findParentNodeInApp(context, "body");
      convertedNode = this.addDynamicScriptNode();
    } else if (this.is("style")) {
      parentNode = this.findParentNodeInApp(context, "head");
      const manager = new this.sandbox.loader.StyleManager(this.el.textContent);
      manager.correctPath(baseUrl);
      if (styleScopeId) {
        manager.setScope({
          appName: namespace,
          rootElId: styleScopeId()
        });
      }
      this.el.textContent = manager.transformCode(manager.styleCode);
      convertedNode = this.el;
      this.sandbox.dynamicStyleSheetElementSet.add(this.el);
      this.monitorChangesOfStyle();
    } else if (this.is("link")) {
      parentNode = this.findParentNodeInApp(context, "head");
      if (this.el.rel === "stylesheet" && this.el.href) {
        convertedNode = this.addDynamicLinkNode((styleNode) => {
          this.nativeAppend.call(parentNode, styleNode);
        });
      } else {
        convertedNode = this.el;
        this.monitorChangesOfLinkNode();
      }
    }
    if (!this.rootElement.contains(parentNode) && document.contains(parentNode)) {
      if (parentNode !== this.rootElement) {
        this.sandbox.deferClearEffects.add(() => {
          this.DOMApis.removeElement(this.el);
          return this.el;
        });
      }
    }
    if (this.el && this.el.querySelectorAll) {
      const needFixDom = this.el.querySelectorAll("iframe,img,video,link,script,audio,style");
      if (needFixDom.length > 0) {
        needFixDom.forEach((dom) => {
          (0, import_utils11.safeWrapper)(() => this.fixResourceNodeUrl(dom));
        });
      }
    }
    if (this.is("iframe") && typeof this.el.onload === "function") {
      const { el, sandbox } = this;
      const originOnload = el.onload;
      el.onload = function() {
        (0, import_utils11.safeWrapper)(() => (0, import_utils11.def)(el.contentWindow, "parent", sandbox.global));
        return originOnload.apply(this, arguments);
      };
    }
    if (convertedNode) {
      if (isInsertMethod(this.methodName) && this.rootElement.contains(context) && ((_b = args[1]) == null ? void 0 : _b.parentNode) === context) {
        return originProcess();
      }
      this.sandbox.hooks.lifecycle.appendNode.emit(parentNode, this.el, convertedNode, this.tagName);
      return this.nativeAppend.call(parentNode, convertedNode);
    }
    return originProcess();
  }
  removeChild(context, originProcess) {
    if (typeof this.el[import_utils11.__REMOVE_NODE__] === "function") {
      this.el[import_utils11.__REMOVE_NODE__]();
      return this.el;
    }
    if (this.is("style") || this.is("link") || this.is("script")) {
      const parentNode = this.findParentNodeInApp(context, this.is("script") ? "body" : "head");
      if (this.el.parentNode === parentNode) {
        if (this.sandbox.dynamicStyleSheetElementSet.has(this.el)) {
          this.sandbox.dynamicStyleSheetElementSet.delete(this.el);
        }
        return this.nativeRemove.call(parentNode, this.el);
      }
    }
    return originProcess();
  }
  getRealSheet() {
    return Reflect.get(HTMLStyleElement.prototype, "sheet", this.el);
  }
  createFakeSheet(styleTransformer) {
    const processor = this;
    const rulesData = [];
    this.sandbox.styledComponentCSSRulesMap.set(this.el, rulesData);
    const fakeSheet = {
      get cssRules() {
        var _a;
        const realSheet = processor.getRealSheet();
        return (_a = realSheet == null ? void 0 : realSheet.cssRules) != null ? _a : [];
      },
      insertRule(rule, index) {
        const realSheet = processor.getRealSheet();
        const transformed = styleTransformer(rule);
        if (realSheet) {
          realSheet.insertRule(transformed, index);
        }
        rulesData.splice(index || 0, 0, transformed);
        return index || 0;
      },
      deleteRule(index) {
        const realSheet = processor.getRealSheet();
        if (realSheet) {
          realSheet.deleteRule(index);
        }
        rulesData.splice(index, 1);
      }
    };
    return fakeSheet;
  }
};
var DynamicNodeProcessor = _DynamicNodeProcessor;
DynamicNodeProcessor.linkLock = new LockQueue();

// src/dynamicNode/index.ts
var mountElementMethods = [
  "append",
  "appendChild",
  "insertBefore",
  "insertAdjacentElement"
];
var removeChildElementMethods = ["removeChild"];
var ignoreElementTimingTags = (0, import_utils13.makeMap)([
  "STYLE",
  "SCRIPTS",
  "LINK",
  "META",
  "TITLE"
]);
function injector(current, methodName) {
  return function() {
    var _a;
    const el = methodName === "insertAdjacentElement" ? arguments[1] : arguments[0];
    const sandbox = sandboxMap.get(el);
    const originProcess = () => current.apply(this, arguments);
    (0, import_utils13.safeWrapper)(() => {
      if (ignoreElementTimingTags(el.tagName))
        return;
      if ((el == null ? void 0 : el.setAttribute) && typeof (el == null ? void 0 : el.setAttribute) === "function" && !(el == null ? void 0 : el.getAttribute("elementtiming")) && sandbox && sandbox.options.disableElementtiming !== true) {
        el == null ? void 0 : el.setAttribute("elementtiming", sandbox ? `${sandbox.options.namespace}-element-timing` : "element-timing");
      }
    });
    if (sandbox) {
      if (el && ((_a = this == null ? void 0 : this.tagName) == null ? void 0 : _a.toLowerCase()) === "style") {
        const manager = new sandbox.loader.StyleManager(el.textContent);
        const { baseUrl, namespace, styleScopeId } = sandbox.options;
        manager.correctPath(baseUrl);
        manager.setScope({
          appName: namespace,
          rootElId: styleScopeId()
        });
        el.textContent = manager.transformCode(manager.styleCode);
        return originProcess();
      } else {
        const processor = new DynamicNodeProcessor(el, sandbox, methodName);
        return processor.append(this, arguments, originProcess);
      }
    } else {
      return originProcess();
    }
  };
}
function injectorRemoveChild(current, methodName) {
  return function() {
    const el = arguments[0];
    const sandbox = el && sandboxMap.get(el);
    const originProcess = () => {
      return current.apply(this, arguments);
    };
    if (sandbox) {
      const processor = new DynamicNodeProcessor(el, sandbox, methodName);
      return processor.removeChild(this, originProcess);
    }
    return originProcess();
  };
}
function handleOwnerDocument() {
  Object.defineProperty(window.Element.prototype, "ownerDocument", {
    get() {
      const sandbox = this && sandboxMap.get(this);
      const realValue = Reflect.get(window.Node.prototype, "ownerDocument", this);
      return sandbox ? sandbox.global.document : realValue;
    },
    set() {
      (typeof process !== "undefined" && process.env && process.env.NODE_ENV ? process.env.NODE_ENV !== "production" : false) && (0, import_utils13.warn)('"ownerDocument" is a read-only attribute.');
    }
  });
}
function makeElInjector(sandboxConfig) {
  if (makeElInjector.hasInject)
    return;
  makeElInjector.hasInject = true;
  if (typeof window.Element === "function") {
    if (sandboxConfig.fixBaseUrl || sandboxConfig.fixOwnerDocument)
      (0, import_utils13.safeWrapper)(() => handleOwnerDocument());
    const rewrite = (methods, builder) => {
      for (const name of methods) {
        const fn = window.Element.prototype[name];
        const symbolProxyName = Symbol.for(name + "_proxy");
        const proxyFlag = window.Element.prototype[symbolProxyName];
        if (typeof fn !== "function" || fn[__domWrapper__] || proxyFlag) {
          continue;
        }
        rawElementMethods[name] = fn;
        const wrapper = builder(fn, name);
        wrapper[__domWrapper__] = true;
        window.Element.prototype[name] = wrapper;
        window.Element.prototype[symbolProxyName] = true;
      }
    };
    rewrite(mountElementMethods, injector);
    rewrite(removeChildElementMethods, injectorRemoveChild);
  }
  injectHandlerParams();
}
function rebuildCSSRules(dynamicStyleSheetElementSet, styledComponentCSSRulesMap) {
  dynamicStyleSheetElementSet.forEach((styleElement) => {
    const rules = styledComponentCSSRulesMap.get(styleElement);
    if (rules && (isStyledComponentsLike(styleElement) || rules.length)) {
      const realSheet = Reflect.get(HTMLStyleElement.prototype, "sheet", styleElement);
      if (realSheet) {
        for (let i = 0; i < rules.length; i++) {
          const cssRule = rules[i];
          realSheet.insertRule(cssRule, i);
        }
      }
    }
  });
}

// src/lifecycle.ts
var import_hooks = require("@garfish/hooks");
function sandboxLifecycle() {
  return new import_hooks.PluginSystem({
    closed: new import_hooks.SyncHook(),
    stared: new import_hooks.SyncHook(),
    appendNode: new import_hooks.SyncHook(),
    documentGetter: new import_hooks.SyncWaterfallHook("documentGetter"),
    beforeClearEffect: new import_hooks.SyncHook(),
    afterClearEffect: new import_hooks.SyncHook(),
    beforeInvoke: new import_hooks.SyncHook(),
    afterInvoke: new import_hooks.SyncHook(),
    invokeError: new import_hooks.SyncHook()
  });
}

// src/proxyInterceptor/global.ts
var import_utils15 = require("@garfish/utils");
function createGetter2(sandbox) {
  return (target, p, receiver) => {
    if (p === Symbol.unscopables)
      return void 0;
    let value;
    const { overrideList } = sandbox.replaceGlobalVariables;
    if (sandbox.isProtectVariable(p)) {
      return Reflect.get(window, p);
    } else if (sandbox.isInsulationVariable(p)) {
      value = Reflect.get(target, p, receiver);
    } else {
      value = (0, import_utils15.hasOwn)(target, p) ? Reflect.get(target, p, receiver) : Reflect.get(window, p);
    }
    if (typeof value === "function") {
      if (isEsGlobalMethods(p) || isNativeCodeMethods(p) || (0, import_utils15.hasOwn)(overrideList, p) || isConstructor(value) || sandbox.isExternalGlobalVariable.has(p)) {
        return value;
      }
    } else {
      return value;
    }
    const newValue = (0, import_utils15.hasOwn)(value, __windowBind__) ? value[__windowBind__] : bind(value, window);
    const verifyResult = verifyGetterDescriptor(target, p, newValue);
    if (verifyResult > 0) {
      if (verifyResult === 1)
        return value;
      if (verifyResult === 2)
        return void 0;
    }
    value[__windowBind__] = newValue;
    return newValue;
  };
}
var safariProxyWindowDealHandler = (0, import_utils15.safari13Deal)();
function createSetter2(sandbox) {
  return (target, p, value, receiver) => {
    const verifyResult = verifySetterDescriptor(sandbox.isProtectVariable(p) ? window : receiver ? receiver : target, p, value);
    if (verifyResult > 0) {
      if (verifyResult === 1 || verifyResult === 2)
        return false;
      if (verifyResult === 3)
        return true;
    }
    if (sandbox.isProtectVariable(p)) {
      return Reflect.set(window, p, value);
    } else {
      safariProxyWindowDealHandler.triggerSet();
      const success = Reflect.set(target, p, value, receiver);
      if (success) {
        if (sandbox.initComplete) {
          sandbox.isExternalGlobalVariable.add(p);
        }
        if (sandbox.global) {
          const methods = sandbox.global[`${GARFISH_OPTIMIZE_NAME}Methods`];
          if (Array.isArray(methods)) {
            if (methods.includes(p)) {
              const updateStack = sandbox.global[`${GARFISH_OPTIMIZE_NAME}UpdateStack`];
              updateStack.forEach((fn) => fn(p, value));
            }
          }
        }
      }
      return success;
    }
  };
}
function createDefineProperty2(sandbox) {
  return (target, p, descriptor) => {
    safariProxyWindowDealHandler.handleDescriptor(descriptor);
    if (sandbox.isProtectVariable(p)) {
      return Reflect.defineProperty(window, p, descriptor);
    } else {
      const success = Reflect.defineProperty(target, p, descriptor);
      if (sandbox.initComplete && success) {
        sandbox.isExternalGlobalVariable.add(p);
      }
      return success;
    }
  };
}
function createDeleteProperty(sandbox) {
  return (target, p) => {
    if ((0, import_utils15.hasOwn)(target, p)) {
      delete target[p];
      if (sandbox.initComplete && sandbox.isExternalGlobalVariable.has(p)) {
        sandbox.isExternalGlobalVariable.delete(p);
      }
    } else if (typeof process !== "undefined" && process.env && process.env.NODE_ENV ? process.env.NODE_ENV !== "production" : false) {
      if ((0, import_utils15.hasOwn)(window, p) && sandbox.isProtectVariable(p)) {
        (0, import_utils15.warn)(`The "${String(p)}" is global protect variable."`);
      }
    }
    return true;
  };
}
function createHas2(sandbox) {
  return (_target, p) => {
    if (sandbox.isProtectVariable(p))
      return false;
    if (sandbox.envVariable === p)
      return false;
    return true;
  };
}

// src/sandbox.ts
var id = 0;
var defaultModules = [
  networkModule,
  timeoutModule,
  intervalModule,
  historyModule,
  documentModule,
  listenerModule,
  observerModule,
  UiEventOverride,
  localStorageModule
];
var isModule = (module2) => {
  return (0, import_utils17.isObject)(module2) ? module2[__garfishGlobal__] !== void 0 : false;
};
var addProxyWindowType = (module2, parentModule) => {
  if (!isModule(module2)) {
    module2[__garfishGlobal__] = parentModule;
  }
  return module2;
};
var Sandbox = class {
  constructor(options) {
    this.id = id++;
    this.type = "vm";
    this.closed = true;
    this.initComplete = false;
    this.version = "1.17.5";
    this.hooks = sandboxLifecycle();
    this.deferClearEffects = /* @__PURE__ */ new Set();
    this.isExternalGlobalVariable = /* @__PURE__ */ new Set();
    this.dynamicStyleSheetElementSet = /* @__PURE__ */ new Set();
    this.styledComponentCSSRulesMap = /* @__PURE__ */ new WeakMap();
    this.optimizeCode = "";
    this.envVariable = "__GARFISH_SANDBOX_ENV_VAR__";
    const defaultOptions = {
      baseUrl: "",
      namespace: "",
      modules: [],
      fixBaseUrl: false,
      fixStaticResourceBaseUrl: true,
      disableWith: false,
      strictIsolation: false,
      disableCollect: false,
      el: () => null,
      styleScopeId: () => "",
      protectVariable: () => [],
      insulationVariable: () => []
    };
    this.options = (0, import_utils17.isPlainObject)(options) ? (0, import_utils17.deepMerge)(defaultOptions, options) : defaultOptions;
    const { loaderOptions, protectVariable, insulationVariable } = this.options;
    this.loader = new import_loader.Loader(loaderOptions);
    this.isProtectVariable = (0, import_utils17.makeMap)((protectVariable == null ? void 0 : protectVariable()) || []);
    this.isInsulationVariable = (0, import_utils17.makeMap)((insulationVariable == null ? void 0 : insulationVariable()) || []);
    this.replaceGlobalVariables = {
      createdList: [],
      prepareList: [],
      recoverList: [],
      overrideList: {}
    };
    makeElInjector(this.options);
    this.start();
    sandboxMap.set(this);
  }
  start() {
    this.closed = false;
    this.replaceGlobalVariables = this.getModuleData();
    const { createdList, overrideList } = this.replaceGlobalVariables;
    this.global = this.createProxyWindow(Object.keys(overrideList));
    if (overrideList && this.global) {
      for (const key in overrideList) {
        this.global[key] = overrideList[key];
      }
    }
    if (createdList) {
      createdList.forEach((fn) => fn && fn(this.global));
    }
    if (!this.options.disableWith) {
      this.optimizeCode = this.optimizeGlobalMethod();
    }
    this.initComplete = true;
    this.hooks.lifecycle.stared.emit(this.global);
  }
  close() {
    if (this.closed)
      return;
    this.clearEffects();
    this.closed = true;
    this.global = void 0;
    this.optimizeCode = "";
    this.initComplete = false;
    this.deferClearEffects.clear();
    this.isExternalGlobalVariable.clear();
    this.dynamicStyleSheetElementSet.clear();
    this.replaceGlobalVariables.createdList = [];
    this.replaceGlobalVariables.prepareList = [];
    this.replaceGlobalVariables.recoverList = [];
    this.replaceGlobalVariables.overrideList = [];
    this.hooks.lifecycle.closed.emit();
  }
  reset() {
    this.close();
    this.start();
  }
  createProxyWindow(moduleKeys = []) {
    const fakeWindow = createFakeObject(window, this.isInsulationVariable, (0, import_utils17.makeMap)(moduleKeys));
    const baseHandlers = {
      get: createGetter2(this),
      set: createSetter2(this),
      defineProperty: createDefineProperty2(this),
      deleteProperty: createDeleteProperty(this),
      getPrototypeOf() {
        return Object.getPrototypeOf(window);
      }
    };
    const parentHandlers = __spreadProps(__spreadValues({}, baseHandlers), {
      has: createHas2(this),
      getPrototypeOf() {
        return Object.getPrototypeOf(window);
      }
    });
    const proxy = new Proxy(fakeWindow, parentHandlers);
    const subProxy = new Proxy(fakeWindow, baseHandlers);
    proxy.self = subProxy;
    proxy.window = subProxy;
    proxy.globalThis = subProxy;
    proxy.__debug_sandbox__ = this;
    (0, import_utils17.safeWrapper)(() => {
      proxy.top = window.top === window ? subProxy : window.top;
      proxy.parent = window.parent === window ? subProxy : window.parent;
    });
    addProxyWindowType(proxy, window);
    return proxy;
  }
  getModuleData() {
    var _a;
    const recoverList = [];
    const createdList = [];
    const prepareList = [];
    const overrideList = {};
    const allModules = defaultModules.concat((_a = this.options.modules) != null ? _a : []);
    for (const module2 of allModules) {
      if (typeof module2 === "function") {
        const { recover, override, created, prepare } = module2(this) || {};
        if (recover)
          recoverList.push(recover);
        if (created)
          createdList.push(created);
        if (prepare)
          prepareList.push(prepare);
        if (override) {
          for (const key in override) {
            if ((typeof process !== "undefined" && process.env && process.env.NODE_ENV ? process.env.NODE_ENV !== "production" : false) && overrideList[key]) {
              (0, import_utils17.warn)(`"${key}" global variables are overwritten.`);
            }
            overrideList[key] = override[key];
          }
        }
      }
    }
    return { recoverList, createdList, overrideList, prepareList };
  }
  clearEffects() {
    this.hooks.lifecycle.beforeClearEffect.emit();
    this.replaceGlobalVariables.recoverList.forEach((fn) => fn && fn());
    this.deferClearEffects.forEach((fn) => fn && fn());
    this.hooks.lifecycle.afterClearEffect.emit();
  }
  optimizeGlobalMethod(tempEnvKeys = []) {
    let code = "";
    const methods = optimizeMethods.filter((p) => {
      return p && !this.isProtectVariable(p) && !tempEnvKeys.includes(p) && (0, import_utils17.hasOwn)(this.global, p);
    });
    if (methods.length > 0) {
      code = methods.reduce((prevCode, name) => {
        return `${prevCode} let ${name} = window.${name};`;
      }, code);
      if (this.global) {
        this.global[`${GARFISH_OPTIMIZE_NAME}Methods`] = methods;
        this.global[`${GARFISH_OPTIMIZE_NAME}UpdateStack`] = [];
      }
      code += `window.${GARFISH_OPTIMIZE_NAME}UpdateStack.push(function(k,v){eval(k+"=v")});`;
    }
    if (tempEnvKeys.length > 0) {
      code = tempEnvKeys.reduce((prevCode, name) => {
        return `${prevCode} let ${name} = ${this.envVariable}.${name};`;
      }, code);
    }
    return code;
  }
  createExecParams(codeRef, env) {
    const { disableWith } = this.options;
    const { prepareList, overrideList } = this.replaceGlobalVariables;
    if (prepareList) {
      prepareList.forEach((fn) => fn && fn());
    }
    const params = __spreadValues({
      window: this.global
    }, overrideList);
    if (disableWith) {
      Object.assign(params, env);
    } else {
      const envKeys = Object.keys(env);
      const optimizeCode = envKeys.length > 0 ? this.optimizeGlobalMethod(envKeys) : this.optimizeCode;
      codeRef.code = `with(window) {;${optimizeCode + codeRef.code}
}`;
      params[this.envVariable] = env;
    }
    return params;
  }
  processExecError(e, url, env, options) {
    this.hooks.lifecycle.invokeError.emit(e, url, env, options);
    if (this.global && typeof this.global.onerror === "function") {
      const source = url || this.options.baseUrl;
      const message = e instanceof Error ? e.message : String(e);
      (0, import_utils17.safeWrapper)(() => {
        var _a, _b;
        (_b = (_a = this.global) == null ? void 0 : _a.onerror) == null ? void 0 : _b.call(this.global, message, source, null, null, e);
      });
    }
    throw e;
  }
  execScript(code, env = {}, url = "", options) {
    var _a;
    const codeRef = { code };
    const { async, defer } = options || {};
    this.hooks.lifecycle.beforeInvoke.emit(codeRef, url, env, options);
    const revertCurrentScript = (0, import_utils17.setDocCurrentScript)((_a = this.global) == null ? void 0 : _a.document, codeRef.code, false, url, async, defer, options == null ? void 0 : options.originScript);
    try {
      const params = this.createExecParams(codeRef, env);
      codeRef.code += `
${url ? `//# sourceURL=${url}
` : ""}`;
      (0, import_utils17.evalWithEnv)(codeRef.code, params, this.global);
    } catch (e) {
      this.processExecError(e, url, env, options);
    } finally {
      Promise.resolve().then(revertCurrentScript);
    }
    this.hooks.lifecycle.afterInvoke.emit(codeRef, url, env, options);
  }
  static getNativeWindow() {
    let module2 = window;
    while (isModule(module2)) {
      module2 = module2[__garfishGlobal__];
    }
    return module2;
  }
  static canSupport() {
    let support = true;
    if (!window.Proxy || !Array.prototype.includes || !String.prototype.includes) {
      support = false;
    }
    if (support) {
      try {
        new Function("let a = 666;");
      } catch (e) {
        support = false;
      }
    }
    if (!support) {
      (0, import_utils17.warn)('The current environment does not support "vm sandbox",Please use the "snapshot sandbox" instead.');
    }
    return support;
  }
};

// src/pluginify.ts
var specialExternalVariables = [
  "onerror",
  "webpackjsonp",
  "__REACT_ERROR_OVERLAY_GLOBAL_HOOK__",
  (typeof process !== "undefined" && process.env && process.env.NODE_ENV ? process.env.NODE_ENV !== "production" : false) ? "webpackHotUpdate" : ""
];
function compatibleOldModule(modules) {
  if (!Array.isArray(modules)) {
    (typeof process !== "undefined" && process.env && process.env.NODE_ENV ? process.env.NODE_ENV !== "production" : false) && (0, import_utils19.warn)('"vm sandbox" modules should be an array');
    const list = [];
    for (const key in modules) {
      list.push(modules[key]);
    }
    modules = list;
  }
  return modules;
}
function rewriteAppAndSandbox(Garfish, app, sandbox) {
  var _a;
  const originExecScript = sandbox.execScript;
  sandbox.loader = Garfish.loader;
  sandbox.execScript = (code, env, url, options) => {
    const evalHooksArgs = [app.appInfo, code, env, url, options];
    app.hooks.lifecycle.beforeEval.emit(...evalHooksArgs);
    try {
      const res = originExecScript.call(sandbox, code, __spreadValues(__spreadValues({}, env), app.getExecScriptEnv(options == null ? void 0 : options.noEntry)), url, options);
      app.hooks.lifecycle.afterEval.emit(...evalHooksArgs);
      return res;
    } catch (err) {
      app.hooks.lifecycle.errorExecCode.emit(err, ...evalHooksArgs);
      throw err;
    }
  };
  app.vmSandbox = sandbox;
  app.global = sandbox.global;
  app.strictIsolation = (_a = sandbox.options.strictIsolation) != null ? _a : false;
  app.runCode = function() {
    return originExecScript.apply(sandbox, arguments);
  };
  if (app.entryManager.DOMApis && sandbox.global) {
    app.entryManager.DOMApis.document = sandbox.global.document;
  }
}
function createOptions(Garfish) {
  const canSupport = Sandbox.canSupport();
  const options = {
    name: "browser-vm",
    version: "1.17.5",
    afterLoad(appInfo, appInstance) {
      var _a, _b, _c, _d, _e, _f, _g;
      if (!canSupport || !appInstance || (appInstance == null ? void 0 : appInstance.vmSandbox) || appInfo.sandbox === false || appInfo.sandbox && appInfo.sandbox.open === false || appInfo.sandbox && appInfo.sandbox.snapshot) {
        if (appInstance == null ? void 0 : appInstance.vmSandbox) {
          appInstance.global = appInstance.vmSandbox.global;
        }
        return;
      }
      rewriteAppAndSandbox(Garfish, appInstance, new Sandbox({
        namespace: appInfo.name,
        addSourceList: appInstance.addSourceList.bind(appInstance),
        baseUrl: appInstance.entryManager.url,
        modules: compatibleOldModule(((_a = appInfo.sandbox) == null ? void 0 : _a.modules) || []),
        fixBaseUrl: Boolean((_b = appInfo.sandbox) == null ? void 0 : _b.fixBaseUrl),
        fixStaticResourceBaseUrl: Boolean((_c = appInfo.sandbox) == null ? void 0 : _c.fixStaticResourceBaseUrl),
        fixOwnerDocument: Boolean((_d = appInfo.sandbox) == null ? void 0 : _d.fixOwnerDocument),
        disableWith: Boolean((_e = appInfo.sandbox) == null ? void 0 : _e.disableWith),
        disableElementtiming: Boolean((_f = appInfo.sandbox) == null ? void 0 : _f.disableElementtiming),
        strictIsolation: Boolean((_g = appInfo.sandbox) == null ? void 0 : _g.strictIsolation),
        disableCollect: appInfo.cache === void 0 ? true : Boolean(appInfo.cache),
        el: () => appInstance.htmlNode,
        styleScopeId: () => appInstance.appContainer.id,
        protectVariable: () => appInfo.protectVariable || [],
        insulationVariable: () => {
          return [
            ...specialExternalVariables,
            ...appInfo.insulationVariable || []
          ].filter(Boolean);
        }
      }));
    },
    afterUnmount(appInfo, appInstance, isCacheMode) {
      if (appInstance.vmSandbox && !isCacheMode) {
        appInstance.vmSandbox.reset();
      }
    },
    afterMount(appInfo, appInstance) {
      if (appInstance.vmSandbox) {
        rebuildCSSRules(appInstance.vmSandbox.dynamicStyleSheetElementSet, appInstance.vmSandbox.styledComponentCSSRulesMap);
        appInstance.vmSandbox.execScript(`
          if (typeof window.onload === 'function') {
            window.onload.call(window);
          }
        `);
      }
    }
  };
  return options;
}
function GarfishBrowserVm() {
  return function(Garfish) {
    Garfish.getGlobalObject = function() {
      return Sandbox.getNativeWindow();
    };
    Garfish.setGlobalValue = function(key, value) {
      return this.getGlobalObject()[key] = value;
    };
    Garfish.clearEscapeEffect = function(key, value) {
      const global = this.getGlobalObject();
      if (key in global) {
        global[key] = value;
      }
    };
    return createOptions(Garfish);
  };
}
module.exports = __toCommonJS(src_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  GarfishBrowserVm
});
