var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  Garfish: () => import_core2.default,
  default: () => GarfishInstance,
  defineCustomElements: () => defineCustomElements
});
var import_core2 = __toESM(require("@garfish/core"));

// src/instance.ts
var import_core = __toESM(require("@garfish/core"));
var import_router = require("@garfish/router");
var import_browser_vm = require("@garfish/browser-vm");
var import_browser_snapshot = require("@garfish/browser-snapshot");
var import_utils = require("@garfish/utils");
function createContext() {
  let fresh = false;
  if ((0, import_utils.inBrowser)() && window["__GARFISH__"] && window["Garfish"]) {
    return window["Garfish"];
  }
  const GarfishInstance2 = new import_core.default({
    plugins: [(0, import_router.GarfishRouter)(), (0, import_browser_vm.GarfishBrowserVm)(), (0, import_browser_snapshot.GarfishBrowserSnapshot)()]
  });
  const set = (namespace, val = GarfishInstance2) => {
    if ((0, import_utils.hasOwn)(window, namespace)) {
      if (!(window[namespace] && window[namespace].flag === import_utils.__GARFISH_FLAG__)) {
        const next = () => {
          fresh = true;
          if (typeof process !== "undefined" && process.env && process.env.NODE_ENV ? process.env.NODE_ENV !== "production" : false) {
            (0, import_utils.warn)(`"Window.${namespace}" will be overwritten by "garfish".`);
          }
        };
        const desc = Object.getOwnPropertyDescriptor(window, namespace);
        if (desc) {
          if (desc.configurable) {
            (0, import_utils.def)(window, namespace, val);
            next();
          } else if (desc.writable) {
            window[namespace] = val;
            next();
          }
        }
      }
    } else {
      fresh = true;
      (0, import_utils.def)(window, namespace, val);
    }
  };
  if ((0, import_utils.inBrowser)()) {
    set("Garfish");
    (0, import_utils.def)(window, "__GARFISH__", true);
  }
  if (fresh) {
    if (typeof process !== "undefined" && process.env && process.env.NODE_ENV ? process.env.NODE_ENV !== "production" : false) {
      if (window["Garfish"].version !== "1.17.5") {
        (0, import_utils.warn)('The "garfish version" used by the main and sub-applications is inconsistent.');
      }
    }
  }
  return GarfishInstance2;
}
var GarfishInstance = createContext();

// src/customElement.ts
function generateCustomerElement(htmlTag, options) {
  class MicroApp extends HTMLElement {
    constructor() {
      super();
      this.appInfo = {
        name: "",
        entry: "",
        basename: ""
      };
      this.options = {
        delay: 200
      };
      this.state = this._observerAppState({
        isLoading: false,
        error: null,
        promise: null,
        loaded: null,
        pastDelay: false
      });
      this.options = options;
    }
    _observerAppState(state) {
      return new Proxy(state, {
        set: (target, p, value, receiver) => {
          const getPlaceHolderAndAppend = () => {
            if (this.placeholder && this.contains(this.placeholder)) {
              this.removeChild(this.placeholder);
            }
            const placeholder = this.options.loading && this.options.loading({
              isLoading: this.state.isLoading,
              error: this.state.error,
              pastDelay: this.state.pastDelay
            });
            placeholder && this.appendChild(placeholder);
            return placeholder;
          };
          const res = Reflect.set(target, p, value, receiver);
          if (p === "error" && value) {
            const placeholder = getPlaceHolderAndAppend();
            if (placeholder)
              this.placeholder = placeholder;
          } else if (p === "pastDelay" && value === true) {
            const placeholder = getPlaceHolderAndAppend();
            if (placeholder)
              this.placeholder = placeholder;
          } else if (p === "isLoading" && value === true) {
            const placeholder = getPlaceHolderAndAppend();
            if (placeholder)
              this.placeholder = placeholder;
          } else if (p === "isLoading" && value === false) {
            if (!this.state.error && this.contains(this.placeholder)) {
              this.removeChild(this.placeholder);
            }
          }
          return res;
        }
      });
    }
    _loadApp() {
      if (this.state.isLoading)
        return;
      this.state.isLoading = true;
      if (typeof this.options.delay === "number") {
        if (this.options.delay === 0) {
          this.state.pastDelay = true;
        } else {
          this._delay = setTimeout(() => {
            this.state.pastDelay = true;
          }, this.options.delay);
        }
      }
      this.state.promise = GarfishInstance.loadApp(this.appInfo.name, {
        entry: this.appInfo.entry,
        domGetter: () => this,
        basename: this.appInfo.basename,
        sandbox: {
          snapshot: false,
          strictIsolation: this.hasAttribute("shadow") || false
        }
      });
    }
    _clearTimeouts() {
      clearTimeout(this._delay);
    }
    async connectedCallback() {
      this.appInfo = {
        name: this.getAttribute("name") || "",
        entry: this.getAttribute("entry") || "",
        basename: this.getAttribute("basename") || "/"
      };
      try {
        this._loadApp();
        this.state.loaded = await this.state.promise;
        if (this.state.loaded.mounted) {
          this.state.loaded.show();
        } else {
          await this.state.loaded.mount();
        }
      } catch (error) {
        this.state.error = error;
      } finally {
        this.state.isLoading = false;
      }
    }
    disconnectedCallback() {
      this._clearTimeouts();
      if (this.state.loaded) {
        this.state.loaded.hide();
      }
    }
    async adoptedCallback() {
    }
    attributeChangedCallback(name, oldValue, newValue) {
      console.log("Custom square element attributes changed.", name, oldValue, newValue);
    }
  }
  if (!customElements.get(htmlTag)) {
    GarfishInstance.run(options.config || {});
    customElements.define(htmlTag, MicroApp);
  }
}
function createLoadableWebComponent(htmlTag, options) {
  if (typeof htmlTag !== "string") {
    throw new Error("garfish requires a `htmlTag` name");
  }
  if (!options.loading) {
    throw new Error("garfish requires a `loading` component");
  }
  const opts = Object.assign({
    loading: false,
    delay: 200,
    timeout: null
  }, options);
  return generateCustomerElement(htmlTag, opts);
}
function defineCustomElements(htmlTag, options) {
  return createLoadableWebComponent(htmlTag, options);
}
module.exports = __toCommonJS(src_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Garfish,
  defineCustomElements
});
