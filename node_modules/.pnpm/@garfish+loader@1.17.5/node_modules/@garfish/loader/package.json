{
  "name": "@garfish/loader",
  "version": "1.17.5",
  "description": "loader module.",
  "keywords": [
    "garfish",
    "loader"
  ],
  "author": "chentao.arthur <chentao.arthur@bytedance.com>",
  "homepage": "http://garfish.bytedance.com",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bytedance/garfish.git"
  },
  "bugs": {
    "url": "https://github.com/bytedance/garfish/issues"
  },
  "exports": {
    ".": {
      "import": "./dist/esm/index.js",
      "require": "./dist/index.js",
      "types": "./dist/index.d.ts"
    },
    "./*": "./*"
  },
  "main": "dist/index.js",
  "module": "dist/esm/index.js",
  "types": "./dist/index.d.ts",
  "dependencies": {
    "@garfish/hooks": "1.17.5",
    "@garfish/utils": "1.17.5"
  },
  "publishConfig": {
    "registry": "https://registry.npmjs.org",
    "access": "public"
  },
  "gitHead": "e8bf48ea8ca8db408a4a0a1cdab8ce4a50ab279b",
  "scripts": {
    "build": "rimraf dist && tsup src/index.ts",
    "dev": "cross-env WATCH=true tsup src/index.ts"
  },
  "readme": "# `@garfish/loader`\n\n[![NPM version](https://img.shields.io/npm/v/@garfish/loader.svg?style=flat-square)](https://www.npmjs.com/package/@garfish/loader)\n\n## Usage\n\n```js\nimport { Loader } from '@garfish/loader';\n\nconst loader = new Loader({\n  maxSize: 1024 * 1024 * 15, // default number is \"1024 * 1024 * 15\"\n});\n\nloader.hooks.usePlugin({\n  name: 'test-plugin1',\n\n  beforeLoad({ url, config }) {\n    // You can changed the request config\n    if (url.includes('xx')) {\n      url = url.replace('xx', '');\n    }\n    return { url, config };\n  },\n\n  loaded(data) {\n    const { result, value } = data;\n    data.n = 1;\n    return data;\n  },\n});\n\nloader.hooks.usePlugin({\n  name: 'test-plugin2',\n\n  loaded(data) {\n    console.log(data.n); // 1\n    // The \"data.value\" will be cached this time.\n    // So, you can transform the request result.\n    return data;\n  },\n});\n\nloader.load({scope: 'appName', url: 'https://xxx'}).then((result) => {\n  console.log(result); // 2\n});\n```\n\n## Clear cache\n\n```js\nconst loader = new Loader();\n\nloader.clear('appName'); // Clear all cached resources under \"appName\"\nloader.clear('appName', 'js'); // Clear all \"js\" cache resources under \"appName\"\n\nloader.clearAll(); // Clear all cached resources\nloader.clearAll('css'); // Clear all \"css\" cached resources\n```\n"
}