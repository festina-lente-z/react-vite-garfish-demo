{
  "name": "@garfish/core",
  "version": "1.17.5",
  "description": "core module.",
  "keywords": [
    "garfish",
    "core",
    "micro front-end"
  ],
  "author": "zhouxiao<codingzx@gmail.com>",
  "homepage": "https://github.com/bytedance/garfish",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bytedance/garfish.git"
  },
  "bugs": {
    "url": "https://github.com/bytedance/garfish/issues"
  },
  "exports": {
    ".": {
      "import": "./dist/esm/index.js",
      "require": "./dist/index.js",
      "types": "./dist/index.d.ts"
    },
    "./*": "./*"
  },
  "main": "dist/index.js",
  "module": "dist/esm/index.js",
  "types": "./dist/index.d.ts",
  "dependencies": {
    "@alioth-org/es-module-lexer": "^1.1.0",
    "@garfish/hooks": "1.17.5",
    "@garfish/loader": "1.17.5",
    "@garfish/utils": "1.17.5",
    "eventemitter2": "^6.4.5"
  },
  "devDependencies": {
    "@garfish/test-suite": "1.17.5"
  },
  "publishConfig": {
    "registry": "https://registry.npmjs.org",
    "access": "public"
  },
  "gitHead": "da33dd16bb9e99588f34079f8b961d0cf9f059fc",
  "scripts": {
    "build": "rimraf dist && tsup src/index.ts",
    "dev": "cross-env WATCH=true tsup src/index.ts"
  },
  "readme": "# `@garfish/core`\n\n[![NPM version](https://img.shields.io/npm/v/@garfish/core.svg?style=flat-square)](https://www.npmjs.com/package/@garfish/core)\n\n## Usage\n\n```shell\n$ yarn add @garfish/core @garfish/cjs-app @garfish/router @garfish/browser-vm @garfish/browser-snapshot\n```\n\n```js\nimport Garfish from '@garfish/core';\nimport { GarfishRouter } from '@garfish/router';\nimport { GarfishBrowserVm } from '@garfish/browser-vm';\nimport { GarfishBrowserSnapshot } from '@garfish/browser-snapshot';\n\nconst GarfishInstance = new Garfish({\n  apps,\n  plugins: [GarfishRouter(), GarfishBrowserVm(), GarfishBrowserSnapshot()],\n});\n```\n\n## loadApp\n\n```js\nimport Garfish from '@garfish/core';\nimport { GarfishBrowserVm } from '@garfish/browser-vm';\n\nconst GarfishInstance = new Garfish({\n  plugins: [GarfishBrowserVm()],\n  beforeLoad: async (appInfo, options) => {\n    // `return false` will prevent the app from loading\n    // return false;\n  },\n  afterLoad: (appInfo, options) => {},\n  beforeEval: (appInfo, code, env, url, options) => {},\n  afterEval: (appInfo, code, env, url, options) => {},\n  beforeMount: (appInfo, app) => {},\n  afterMount: (appInfo, app) => {},\n  beforeUnmount: (appInfo, app) => {},\n  afterUnmount: (appInfo, app) => {},\n  errorLoadApp: (err, appInfo) => console.error(err),\n  errorMountApp: (err, appInfo) => console.error(err),\n  errorUnmountApp: (err, appInfo) => console.error(err),\n  errorExecCode: (err, appInfo) => console.error(err),\n});\n\n// `appName` is globally unique.\nGarfishInstance.loadApp('appName', 'https://xx.html').then(async (app) => {\n  if (!app) return;\n  let mountSuccess;\n  try {\n    mountSuccess = await app.mount();\n  } catch (e) {\n    // If you add the `errorMountApp` hook, no error will be thrown here\n    console.log(e);\n  }\n\n  if (mountSuccess) {\n    document.body.appendChild(app.appContainer);\n    // unmount\n    setTimeout(() => {\n      const unmountSuccess = app.unmout();\n      console.log(unmountSuccess);\n    }, 1000);\n  }\n});\n```\n\nYou can also pass more complex parameters.\n\n```js\nGarfishInstance.loadApp('appName', {\n  cache: true,\n  entry: 'https://xx.html',\n  domGetter: '#appContainer', // When the child application is rendered, it will be mounted here\n}).then(async (app) => {\n  if (!app) return;\n  // ...\n});\n```\n"
}